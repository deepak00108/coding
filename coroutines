1 ==================================


def linear_equation(a, b):
        while True :
            x = yield  
            
            ans = a*(x**2) + b 
            print("Expression, {}*x^2 + {}, with x being {} equals {}".format(a,b,x,ans))
    


2=========================================

def coroutine_decorator(coroutine_func):
    def inner(*args,**kwargs) : 
        c = coroutine_func(*args, **kwargs)
        next(c)
        return c
    return inner# Define coroutine 'linear_equation' as specified in previous exercise
@coroutine_decorator
def linear_equation(a, b):
        while True :
            x = yield  
            
            ans = a*(x**2) + b 
            print("Expression, {}*x^2 + {}, with x being {} equals {}".format(a,b,x,ans))



3==================================================
def coroutine_decorator(coroutine_func):
    def inner(*args,**kwargs) : 
        c = coroutine_func(*args, **kwargs)
        next(c)
        return c
    return inner# Define coroutine 'linear_equation' as specified in previous exercise
@coroutine_decorator
def linear_equation(a, b):
        while True :
            x = yield  
            
            ans = a*(x**2) + b 
            print("Expression, {}*x^2 + {}, with x being {} equals {}".format(a,b,x,ans))
    
# Define the coroutine function 'numberParser' below
@coroutine_decorator
def numberParser():
    equation1 = linear_equation(3, 4)
    equation2 = linear_equation(2, -1)
    # code to send the input number to both the linear equations 
    while True :
        x = yield
        equation1.send(x)
        equation2.send(x)
def main(x):
    n = numberParser()
    n.send(x)
    
